extends MeshInstance3D

var done = false
var socket = PacketPeerUDP.new()
var num_socket = 12345
var json = JSON.new()
var new_material = StandardMaterial3D.new()

func _init():
	socket.bind(num_socket, "127.0.0.1", 8300)
	if(socket.is_socket_connected() != true):
		print("An error occurred listening on port 4242")
	else:
		done = true;
		print("Listening on port 12345 on localhost")
	
	new_material.albedo_texture = load("res://wallpaperCool.png")
	
	
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	var verts = []
	if socket.get_available_packet_count() > 0:
		var pkt = socket.get_packet().get_string_from_ascii()
		pkt = json.parse_string(pkt)
		var origin = pkt[1]
		for i in range(478):
			var x = (pkt[i][0] - origin[0]) / 10
			var y = (pkt[i][1] - origin[1]) / 10
			var z = (pkt[i][2] - origin[2]) / 10
			var vector = Vector3(x,y,z)
			verts.append(vector)
	var vertecies = PackedVector3Array(verts)
	var indices := PackedInt32Array(
		#[
			#10,338,337,
			#10,337,151,
			#151,337,336,
			#151,336,9,
			#9,336,285,
			#9,285,8,
			#8,285,417,
			#8,417,168,
			#168,417,351,
			#168,351,6,
			#6,351,419,
			#6,419,197,
			#197,419,248,
			#197,248,195,
			#195,248,281,
			#195,281,5,
			#5,281,275,
			#5,275,4,
			#4,275,1,
			#275,274,1,
			#1,274,19,
			#274,354,19,
			#354,19,94,
			#354,370,94,
			#370,94,2,
			#370,2,326,
			#326,2,164,
			#326,164,393,
			#164,393,267,
			#164,267,0,
		#]
		[
			338,151,109,
			151,338,299,
			332,299,338,
			299,332,298,
			251,298,332,
			298,251,368,
			356,368,251,
			368,356,447,
			323,447,356,
			447,323,401,
			288,401,323,
			401,288,367,
			365,367,288,
			367,365,394,
			378,394,365,
			394,378,369,
			377,369,378,
			369,377,175,
			148,175,377,
			175,148,140,
			140,148,149,
			140,149,169,
			169,149,136,
			169,136,138,
			138,136,58,
			138,58,177,
			93,177,58,
			93,227,177,
			127,227,93,
			127,139,227,
			21,139,127,
			21,68,139,
			103,68,21,
			103,69,68,
			109,69,103,
			109,151,69,
			151,336,107,
			299,336,151,
			299,334,336,
			298,334,299,
			298,300,334,
			368,300,298,
			368,372,300,
			447,372,368,
			447,352,372,
			401,352,447,
			401,433,352,
			367,433,401,
			367,434,433,
			394,434,367,
			394,431,434,
			369,431,394,
			369,428,431,
			175,428,369,
			175,208,428,
			140,208,175,
			140,211,208,
			169,211,140,
			169,214,211,
			138,214,169,
			138,213,214,
			177,213,138,
			177,123,213,
			227,123,177,
			227,143,123,
			139,143,227,
			139,70,143,
			68,70,139,
			68,105,70,
			69,105,68,
			69,107,105,
			151,107,69,
			336,8,107,
			336,295,285,
			336,285,8,
			334,295,336,
			334,283,282,
			334,282,295,
			300,283,334,
			300,353,276,
			300,276,283,
			372,353,300,
			372,340,265,
			372,265,353,
			352,340,372,
			352,346,340,
			352,280,346,
			352,411,280,
			433,411,352,
			433,427,411,
			434,427,433,
			434,422,432,
			431,422,434,
			431,418,424,
			431,424,422,
			428,418,431,
			428,200,421,
			428,421,418,
			208,200,428,
			208,194,201,
			208,201,200,
			211,194,208,
			211,202,204,
			211,204,194,
			214,202,211,
			214,212,202,
			213,207,214,
			213,187,207,
			123,187,213,
			116,117,123,
			116,111,117,
			116,143,111,
			70,124,143,
			143,124,35,
			70,53,46,
			70,46,124,
			105,53,70,
			105,65,52,
			105,52,53,
			107,65,105,
			107,8,55,
			107,55,65,
			#fin des gros triangles
			143,35,111,
			52,222,223,
			65,222,52,
			65,55,222,
			55,221,222,
			55,8,193,
			55,193,221,
			53,52,224,
			52,223,224,
			46,53,225,
			53,224,225,
			124,46,113,
			46,225,113,
			124,113,226,
			35,124,226,
			35,226,31,
			35,31,111,
			111,31,117,
			31,228,117,
			228,229,118,
			228,118,117,
			229,230,119,
			229,119,118,
			230,231,120,
			230,120,119,
			231,232,121,
			231,121,120,
			232,233,128,
			232,128,121,
			233,244,128,
			244,245,128,
			189,245,244,
			189,193,245,
			221,193,189,
			##contour oeuil gauche c'est cool
			223,222,28,
			223,28,27,
			222,221,56,
			222,56,28,
			221,189,56,
			189,190,56,
			189,244,190,
			190,244,243,
			243,244,233,
			243,233,112,
			112,233,232,
			112,232,26,
			22,26,232,
			22,232,231,
			23,22,231,
			23,231,230,
			24,23,230,
			24,230,229,
			110,24,229,
			110,229,228,
			25,110,228,
			25,228,31,
			130,25,226,
			25,31,226,
			247,130,113,
			113,130,226,
			225,30,247,
			113,225,247,
			224,29,30,
			225,224,30,
			224,223,29,
			223,27,29,
			##deuxieme contour oeuil gauche
			29,27,159,
			29,159,160,
			28,159,27,
			28,158,159,
			56,158,28,
			56,157,158,
			190,157,56,
			190,173,157,
			243,173,190,
			243,133,173,
			112,133,243,
			112,155,133,
			26,155,112,
			26,154,155,
			22,154,26,
			22,153,154,
			23,153,22,
			23,145,153,
			23,24,144,
			23,144,145,
			110,144,24,
			110,163,144,
			110,7,163,
			110,25,7,
			25,33,7,
			25,130,33,
			33,247,246,
			33,130,247,
			247,30,161,
			247,161,246,
			30,29,160,
			30,160,161
		]
	)
	var array = []
	array.resize(ArrayMesh.ARRAY_MAX)
	array[ArrayMesh.ARRAY_VERTEX] = vertecies
	array[ArrayMesh.ARRAY_INDEX] = indices
	var a_mesh = ArrayMesh.new()
	if (len(vertecies) != 0):
		a_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, array)
		mesh = a_mesh
		#mesh.material = new_material 
	
